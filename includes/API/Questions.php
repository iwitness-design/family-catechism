<?php

namespace FamilyCatechism\API;

use FamilyCatechism\Taxos;

class Questions extends \WP_REST_Posts_Controller {

	public function register_routes() {
		parent::register_routes(); // TODO: Change the autogenerated stub

		register_rest_route( $this->namespace, '/' . $this->rest_base . '/all', array(
			array(
				'methods'             => \WP_REST_Server::READABLE,
				'callback'            => array( $this, 'get_all_items' ),
				'permission_callback' => array( $this, 'get_items_permissions_check' ),
				'args'                => $this->get_collection_params(),
			),
		) );

	}

	public function get_all_items() {

		if ( 1 || ! $all_questions = get_transient( 'fc_all_questions' ) ) {

			$sections     = get_terms( array( 'taxonomy' => Taxos::$_section, 'fields' => 'all_with_object_id' ) );
			$new_sections = array();

			foreach ( $sections as $key => $section ) {
				$new_sections[ $section->term_id ]            = $section;
				$new_sections[ $section->term_id ]->questions = array();
			}

			$sections = $new_sections;
			unset( $new_sections );

			$questions = get_posts( array(
				'post_type'              => $this->post_type,
				'posts_per_page'         => 400,
				'update_post_meta_cache' => false,
				'fa_language'            => 'english',
			    'order'                  => 'ASC',
			) );

			foreach ( $questions as $question ) {

				if ( ! $q_sections = get_the_terms( $question->ID, Taxos::$_section ) ) {
					continue;
				}

				foreach ( $q_sections as $section ) {
					if ( false !== strpos( $section->slug, 'chapter' ) ) {
						$sections[ $section->term_id ]->questions[] = array(
							'id'     => $question->ID,
							'title'  => $question->post_title,
							'number' => $question->menu_order,
						);
					}
				}
			}

			$all_questions = array();
			self::sort_terms_hierarchicaly( $sections, $all_questions );

			set_transient( 'fc_all_questions', $all_questions );

		}

		$response = rest_ensure_response( $all_questions );

		return $response;
	}

	/**
	 * Retrieves the query params for the posts collection.
	 *
	 * @since 4.7.0
	 * @access public
	 *
	 * @return array Collection parameters.
	 */
	public function get_collection_params() {
		$query_params = parent::get_collection_params();

		$query_params['per_page']['maximum'] = 400;

		return $query_params;
	}

	protected function get_additional_fields( $object_type = null ) {
		$fields = parent::get_additional_fields( $object_type );

		$fields['number'] = array(
			'get_callback' => array( $this, 'get_value' ),
			'schema'       => array(
				'description' => __( 'The question number.', familycatechism()->get_id() ),
				'type'        => 'string',
				'context'     => array( 'view' ),
			    'readonly'    => true,
			),
		);

		$fields['text_answer'] = array(
			'get_callback' => array( $this, 'get_value' ),
			'schema'       => array(
				'description' => __( 'The answer.', familycatechism()->get_id() ),
				'type'        => 'object',
				'context'     => array( 'view' ),
			    'readonly'    => true,
			),
		);

		$fields['video_answer'] = array(
			'get_callback' => array( $this, 'get_value' ),
			'schema'       => array(
				'description' => __( 'The video answer.', familycatechism()->get_id() ),
				'type'        => 'array',
				'context'     => array( 'view' ),
			    'readonly'    => true,
			),
		);

		$fields['cross_references'] = array(
			'get_callback' => array( $this, 'get_value' ),
			'schema'       => array(
				'description' => __( 'The answer cross references.', familycatechism()->get_id() ),
				'type'        => 'array',
				'context'     => array( 'view' ),
			    'readonly'    => true,
			),
		);

		$fields['cross_reference'] = array(
			'get_callback' => array( $this, 'get_value' ),
			'schema'       => array(
				'description' => __( 'The main cross reference.', familycatechism()->get_id() ),
				'type'        => 'array',
				'context'     => array( 'view' ),
			    'readonly'    => true,
			),
		);

		$fields['exercises'] = array(
			'get_callback' => array( $this, 'get_value' ),
			'schema'       => array(
				'description' => __( 'The question exercises.', familycatechism()->get_id() ),
				'type'        => 'array',
				'context'     => array( 'view' ),
			    'readonly'    => true,
			),
		);

		$fields['thought_provokers'] = array(
			'get_callback' => array( $this, 'get_value' ),
			'schema'       => array(
				'description' => __( 'The question thought provokers.', familycatechism()->get_id() ),
				'type'        => 'array',
				'context'     => array( 'view' ),
			    'readonly'    => true,
			),
		);

		$fields['images'] = array(
			'get_callback' => array( $this, 'get_value' ),
			'schema'       => array(
				'description' => __( 'The question images.', familycatechism()->get_id() ),
				'type'        => 'array',
				'context'     => array( 'view' ),
			    'readonly'    => true,
			),
		);

		return $fields;
	}

	public function get_value( $post, $field_name, $request ) {

		switch( $field_name ) {
			case 'number' :
				return self::get_meta( $post['id'], 'fc_number' );

			case 'text_answer' :
				return array(
					'author' => self::get_meta( $post['id'], 'fc_answers_textanswer_answeredby' ),
					'text'   => self::get_meta( $post['id'], 'fc_answers_textanswer_text' ),
				);

			case 'video_answer' :
				return self::get_meta( $post['id'], 'fc_answers_videoanswer' );

			case 'cross_references' :
				return self::get_meta( $post['id'], 'fc_crossreference' );

			case 'cross_reference' :
				return self::get_meta( $post['id'], 'fc_crossreferencesother' );

			case 'exercises' :
				return self::get_meta( $post['id'], 'fc_exercise' );

			case 'thought_provokers' :
				return self::get_meta( $post['id'], 'fc_thoughtprovoker' );

			case 'images' :
				return self::get_meta( $post['id'], 'fc_image' );

		}

		return '';
	}

	/**
	 * Get post meta and allow for default
	 *
	 * @param        $post_id
	 * @param        $key
	 * @param string $default
	 *
	 * @since  1.0.0
	 *
	 * @return mixed|string
	 * @author Tanner Moushey
	 */
	public static function get_meta( $post_id, $key, $default = '' ) {
		if ( ! $value = get_post_meta( $post_id, $key, true ) ) {
			$value = $default;
		}

		return self::sanitize_meta( $value );
	}

	/**
	 * Sanitize meta fields
	 *
	 * @param $value
	 *
	 * @since  1.0.0
	 *
	 * @return string|void
	 * @author Tanner Moushey
	 */
	public static function sanitize_meta( $value ) {
		if ( is_array( $value ) ) {
			foreach( $value as &$val ) {
				$val = self::sanitize_meta( $val );
			}
		} else {
			$value = htmlspecialchars_decode( sanitize_text_field( $value ) );
		}

		return $value;
	}

	public static function get_var( $key, $object, $default = '' ) {
		if ( is_object( $object ) && isset( $object->$key ) ) {
			return $object->$key;
		}

		if ( is_array( $object ) && isset( $object[ $key ] ) ) {
			return $object[ $key ];
		}

		return $default;
	}

	public static function sort_terms_hierarchicaly( Array &$cats, Array &$into, $parentId = 0 ) {
		foreach ( $cats as $i => $cat ) {
			if ( $cat->parent == $parentId ) {
				$into[] = $cat;
				unset( $cats[ $i ] );
			}
		}

		foreach ( $into as $topCat ) {
			$topCat->children = array();
			self::sort_terms_hierarchicaly( $cats, $topCat->children, $topCat->term_id );
		}
	}
}