<?php

namespace FamilyCatechism\API;

use FamilyCatechism\Taxos;

class Questions extends \WP_REST_Posts_Controller {

	public function register_routes() {
		parent::register_routes(); // TODO: Change the autogenerated stub

		register_rest_route( $this->namespace, '/' . $this->rest_base . '/all', array(
			array(
				'methods'             => \WP_REST_Server::READABLE,
				'callback'            => array( $this, 'get_all_items' ),
				'permission_callback' => array( $this, 'get_items_permissions_check' ),
				'args'                => $this->get_collection_params(),
			),
		) );

	}

	public function get_all_items() {

		if ( 1 || ! $all_questions = get_transient( 'fc_all_questions' ) ) {

			$questions = get_posts( array(
				'post_type'              => $this->post_type,
				'posts_per_page'         => 400,
				'update_post_meta_cache' => false,
				'fc_language'            => empty( $_GET['fc_language'] ) ? 'english' : get_term( $_GET['fc_language'], Taxos::$_language )->slug,
			    'order'                  => 'ASC',
			    'orderby'                => 'menu_order',
			) );

			$all_questions = array();

			foreach ( $questions as $question ) {

				if ( ! $q_sections = get_the_terms( $question->ID, Taxos::$_section ) ) {
					continue;
				}

				$data = array(
					'id'     => $question->ID,
					'title'  => $question->post_title,
					'number' => $question->menu_order,
				);

				foreach ( $q_sections as $section ) {
					$key = false;

					if ( false !== strpos( strtolower( $section->slug ), 'chapter' ) ) {
						$key = 'chapter';
					} elseif ( false !== strpos( strtolower( $section->slug ), 'part' ) ) {
						$key = 'part';
					} elseif ( false !== strpos( strtolower( $section->slug ), 'section' ) ) {
						$key = 'section';
					}

					if ( $key ) {
						$data[ $key ] = array(
							'id'          => $section->term_id,
							'name'        => html_entity_decode( $section->name ),
							'description' => html_entity_decode( $section->description ),
							'color'       => self::get_term_color( $section->term_id ),
							'image'       => self::get_term_image( $section->term_id ),
						);
					}
				}

				$all_questions[] = $data;
			}

			set_transient( 'fc_all_questions', $all_questions );

		}

		$response = rest_ensure_response( $all_questions );

		return $response;
	}

	/**
	 * Retrieves the query params for the posts collection.
	 *
	 * @since 4.7.0
	 * @access public
	 *
	 * @return array Collection parameters.
	 */
	public function get_collection_params() {
		$query_params = parent::get_collection_params();

		$query_params['per_page']['maximum'] = 400;
		$query_params['per_page']['default'] = 1;
		$query_params['order']['default'] = 'asc';

		$language = get_term_by( 'slug', 'english', Taxos::$_language );
		$query_params[ Taxos::$_language ]['default'] = $language->term_id;

		$query_params['numbers'] = array(
			'description' => __( 'Limit questions to the provided numbers' ),
			'type'        => 'array',
			'items'       => array(
				'type' => 'integer',
			),
			'default'     => array(),
		);

		return $query_params;
	}

	/**
	 * Determines the allowed query_vars for a get_items() response and prepares
	 * them for WP_Query.
	 *
	 * @since 4.7.0
	 * @access protected
	 *
	 * @param array           $prepared_args Optional. Prepared WP_Query arguments. Default empty array.
	 * @param \WP_REST_Request $request       Optional. Full details about the request.
	 * @return array Items query arguments.
	 */
	protected function prepare_items_query( $prepared_args = array(), $request = null ) {
		$query_args = parent::prepare_items_query( $prepared_args, $request );

		if ( empty( $query_args['meta_query'] ) ) {
			$query_args['meta_query'] = array();
		}

		if ( isset( $request['numbers'] ) ) {
			$query_args['meta_query'][] = array(
				'key'     => 'fc_number',
				'value'   => (array) $request['numbers'],
				'compare' => 'IN',
			);
		}

		return $query_args;
	}

	protected function get_additional_fields( $object_type = null ) {
		$fields = parent::get_additional_fields( $object_type );

		$fields['number'] = array(
			'get_callback' => array( $this, 'get_value' ),
			'schema'       => array(
				'description' => __( 'The question number.', familycatechism()->get_id() ),
				'type'        => 'string',
				'context'     => array( 'view' ),
			    'readonly'    => true,
			),
		);

		$fields['text_answer'] = array(
			'get_callback' => array( $this, 'get_value' ),
			'schema'       => array(
				'description' => __( 'The answer.', familycatechism()->get_id() ),
				'type'        => 'object',
				'context'     => array( 'view' ),
			    'readonly'    => true,
			),
		);

		$fields['prayer'] = array(
			'get_callback' => array( $this, 'get_value' ),
			'schema'       => array(
				'description' => __( 'The summary prayer.', familycatechism()->get_id() ),
				'type'        => 'object',
				'context'     => array( 'view' ),
			    'readonly'    => true,
			),
		);

		$fields['video_answer'] = array(
			'get_callback' => array( $this, 'get_value' ),
			'schema'       => array(
				'description' => __( 'The video answer.', familycatechism()->get_id() ),
				'type'        => 'array',
				'context'     => array( 'view' ),
			    'readonly'    => true,
			),
		);

		$fields['chapter'] = array(
			'get_callback' => array( $this, 'get_value' ),
			'schema'       => array(
				'description' => __( 'The chapter details.', familycatechism()->get_id() ),
				'type'        => 'object',
				'context'     => array( 'view' ),
			    'readonly'    => true,
			),
		);

		$fields['part'] = array(
			'get_callback' => array( $this, 'get_value' ),
			'schema'       => array(
				'description' => __( 'The part details.', familycatechism()->get_id() ),
				'type'        => 'object',
				'context'     => array( 'view' ),
			    'readonly'    => true,
			),
		);

		$fields['section'] = array(
			'get_callback' => array( $this, 'get_value' ),
			'schema'       => array(
				'description' => __( 'The section details.', familycatechism()->get_id() ),
				'type'        => 'object',
				'context'     => array( 'view' ),
			    'readonly'    => true,
			),
		);

		$fields['cross_references'] = array(
			'get_callback' => array( $this, 'get_value' ),
			'schema'       => array(
				'description' => __( 'The answer cross references.', familycatechism()->get_id() ),
				'type'        => 'array',
				'context'     => array( 'view' ),
			    'readonly'    => true,
			),
		);

		$fields['cross_reference'] = array(
			'get_callback' => array( $this, 'get_value' ),
			'schema'       => array(
				'description' => __( 'The main cross reference.', familycatechism()->get_id() ),
				'type'        => 'array',
				'context'     => array( 'view' ),
			    'readonly'    => true,
			),
		);

		$fields['exercises'] = array(
			'get_callback' => array( $this, 'get_value' ),
			'schema'       => array(
				'description' => __( 'The question exercises.', familycatechism()->get_id() ),
				'type'        => 'array',
				'context'     => array( 'view' ),
			    'readonly'    => true,
			),
		);

		$fields['thought_provokers'] = array(
			'get_callback' => array( $this, 'get_value' ),
			'schema'       => array(
				'description' => __( 'The question thought provokers.', familycatechism()->get_id() ),
				'type'        => 'array',
				'context'     => array( 'view' ),
			    'readonly'    => true,
			),
		);

		$fields['images'] = array(
			'get_callback' => array( $this, 'get_value' ),
			'schema'       => array(
				'description' => __( 'The question images.', familycatechism()->get_id() ),
				'type'        => 'array',
				'context'     => array( 'view' ),
			    'readonly'    => true,
			),
		);

		return $fields;
	}

	public function get_value( $post, $field_name, $request ) {

		switch( $field_name ) {
			case 'number' :
				return self::get_meta( $post['id'], 'fc_number' );

			case 'text_answer' :
				return array(
					'author' => self::get_meta( $post['id'], 'fc_answers_textanswer_answeredby' ),
					'text'   => self::get_meta( $post['id'], 'fc_answers_textanswer_text' ),
				);

			case 'video_answer' :
				return self::get_meta( $post['id'], 'fc_answers_videoanswer' );

			case 'prayer' :
				return self::get_meta( $post['id'], 'fc_prayer' );

			case 'chapter' :
			case 'part' :
			case 'section' :
				return self::get_term_details( $post['id'], $field_name );

			case 'cross_references' :
				return self::get_meta( $post['id'], 'fc_crossreference' );

			case 'cross_reference' :
				return wpautop( self::get_meta( $post['id'], 'fc_crossreferencesother' ) );

			case 'exercises' :
				return self::get_meta( $post['id'], 'fc_exercise' );

			case 'thought_provokers' :
				return self::get_meta( $post['id'], 'fc_thoughtprovoker' );

			case 'images' :
				return self::get_meta( $post['id'], 'fc_image' );

		}

		return '';
	}

	/**
	 * Get post meta and allow for default
	 *
	 * @param        $post_id
	 * @param        $key
	 * @param string $default
	 *
	 * @since  1.0.0
	 *
	 * @return mixed|string
	 * @author Tanner Moushey
	 */
	public static function get_meta( $post_id, $key, $default = '' ) {
		if ( ! $value = get_post_meta( $post_id, $key, true ) ) {
			$value = $default;
		}

		return self::sanitize_meta( $value );
	}

	/**
	 * Get the chapter prayer for the provided question
	 *
	 * @param $post_id
	 * @param string $type the term type. either chapter, part, or section
	 *
	 * @since  1.0.0
	 *
	 * @return mixed|string
	 * @author Tanner Moushey
	 */
	public static function get_term_details( $post_id, $type = 'chapter' ) {
		$terms = get_the_terms( $post_id, Taxos::$_section );
		$data  = array();

		if ( empty( $terms ) || is_wp_error( $terms ) ) {
			return $data;
		}

		foreach( $terms as $term ) {

			$term_type = '';
			foreach( array( 'chapter', 'part', 'section' ) as $term_type ) {
				if ( strpos( $term->slug, $term_type ) ) {
					break;
				}
			}

			if ( $term_type != $type ) {
				continue;
			}

			$data = array(
				'id'          => $term->term_id,
				'name'        => $term->name,
				'description' => $term->description,
			    'color'       => self::get_term_color( $term->term_id ),
			    'image'       => self::get_term_image( $term->term_id ),
			);

			break;
		}

		if ( empty( $data ) ) {
			return $data;
		}

		switch ( $type ) {
			case 'chapter' :
				$data['prayer'] = wp_kses_post( apply_filters( 'the_content', get_term_meta( $data['id'], 'fc_prayer', true ) ) );
				break;
		}

		return $data;
	}

	/**
	 * Get the color associated with the term
	 *
	 * @param $term_id
	 *
	 * @since  1.0.0
	 *
	 * @return string
	 * @author Tanner Moushey
	 */
	public static function get_term_color( $term_id ) {
		if ( ! $color = get_term_meta( $term_id, 'fc_term_color', true ) ) {
			return '';
		}

		return sanitize_text_field( $color );
	}

	/**
	 * Get the image associated with this image
	 *
	 * @param $term_id
	 *
	 * @since  1.0.0
	 *
	 * @return string
	 * @author Tanner Moushey
	 */
	public static function get_term_image( $term_id ) {
		if ( ! $image_id = get_term_meta( $term_id, 'fc_term_image_id', true ) ) {
			return '';
		}

		$image = wp_get_attachment_image_src( $image_id, 'medium' );

		if ( empty( $image[0] ) ) {
			return '';
		}

		return esc_url( $image[0] );
	}

	/**
	 * Sanitize meta fields
	 *
	 * @param $value
	 *
	 * @since  1.0.0
	 *
	 * @return string
	 * @author Tanner Moushey
	 */
	public static function sanitize_meta( $value ) {

		if ( is_object( $value ) ) {
			$value = get_object_vars( $value );
		}

		if ( is_array( $value ) ) {
			foreach( $value as &$val ) {
				$val = self::sanitize_meta( $val );
			}
		} else {
			$value = htmlspecialchars_decode( wp_kses_post( html_entity_decode( $value ) ) );
		}

		return $value;
	}

	public static function get_var( $key, $object, $default = '' ) {
		if ( is_object( $object ) && isset( $object->$key ) ) {
			return $object->$key;
		}

		if ( is_array( $object ) && isset( $object[ $key ] ) ) {
			return $object[ $key ];
		}

		return $default;
	}

	public static function sort_terms_hierarchicaly( Array &$cats, Array &$into, $parentId = 0 ) {
		foreach ( $cats as $i => $cat ) {
			if ( $cat->parent == $parentId ) {
				$into[] = $cat;
				unset( $cats[ $i ] );
			}
		}

		foreach ( $into as $topCat ) {
			$topCat->children = array();
			self::sort_terms_hierarchicaly( $cats, $topCat->children, $topCat->term_id );
		}
	}
}